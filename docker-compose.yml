# Docker Compose 파일 버전 (3.8은 Docker Engine 19.03.0+ 지원)
version: '3.8'

services:
  mysql:
    # 사용할 MySQL Docker 이미지 (8.0 버전 - 최신 LTS)
    image: mysql:8.0
    
    # 컨테이너 이름 지정 (docker ps에서 보이는 이름)
    container_name: mysql_nest_react_db
    
    # 컨테이너 재시작 정책 (시스템 재부팅 시 자동 시작, 수동 정지 시 재시작 안함)
    restart: unless-stopped
    
    # MySQL 컨테이너 환경 변수 설정
    environment:
      # MySQL root 사용자 비밀번호
      MYSQL_ROOT_PASSWORD: rootpassword
      
      # 초기 생성할 데이터베이스 이름
      MYSQL_DATABASE: mysql_nest_react
      
      # 애플리케이션용 MySQL 사용자 생성
      MYSQL_USER: nestuser
      
      # 애플리케이션 사용자 비밀번호
      MYSQL_PASSWORD: nestpassword
    
    # 포트 매핑 (호스트:컨테이너)
    # 로컬 3306 포트로 MySQL에 접근 가능
    ports:
      - "3306:3306"
    
    # 볼륨 마운트 설정
    volumes:
      # Named volume: 데이터베이스 파일들을 영구 저장
      # mysql_data(Docker 관리 볼륨) -> /var/lib/mysql(컨테이너 내 MySQL 데이터 디렉토리)
      # 컨테이너가 삭제되어도 데이터가 보존됩니다
      - mysql_data:/var/lib/mysql
      
      # Bind mount: 로컬 초기화 스크립트를 컨테이너로 마운트
      # ./services/infrastructure/docker/mysql/init(호스트) -> /docker-entrypoint-initdb.d(컨테이너)
      # 이 폴더에 있는 .sql, .sh, .sql.gz 파일들이 MySQL 최초 시작 시 자동 실행됩니다
      - ./services/infrastructure/docker/mysql/init:/docker-entrypoint-initdb.d
    
    # 네트워크 연결 (다른 서비스와 통신을 위한 네트워크)
    networks:
      - app-network

# Named Volume 정의 섹션
volumes:
  # Named volume 정의: Docker가 관리하는 데이터 볼륨
  # 위치: /var/lib/docker/volumes/mysql_data/_data (Linux/Mac)
  # 컨테이너 재생성 시에도 데이터가 유지됩니다
  
  # mysql_data:
  # 1. 기본 설정 사용 (Docker가 자동으로 적절한 위치에 볼륨 생성)
  # 2. driver: local (기본값 - 로컬 파일시스템 사용)
  # 3. 호스트 경로를 지정하지 않음 (Docker가 관리)
  mysql_data:
  
  # 만약 상세 설정이 필요하다면 다음과 같이 작성:
  # mysql_data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     o: bind
  #     device: /path/to/host/directory

# 네트워크 정의 섹션
networks:
  # 커스텀 네트워크 생성 (서비스 간 통신용)
  app-network:
    # 브리지 드라이버 사용 (기본값, 컨테이너 간 통신 가능)
    # 나중에 백엔드, 프론트엔드 컨테이너가 추가되면 같은 네트워크로 연결
    driver: bridge
